#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞—Ü–∏–∏ –≤–µ—Ä—Å–∏–∏ –ø—Ä–∏ –¥–µ–ø–ª–æ–µ
 *
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/increment-version.js [patch|minor|major]
 *
 * –ü—Ä–∏–º–µ—Ä—ã:
 * node scripts/increment-version.js patch  # 1.11.0 ‚Üí 1.11.1
 * node scripts/increment-version.js minor  # 1.11.0 ‚Üí 1.12.0
 * node scripts/increment-version.js major  # 1.11.0 ‚Üí 2.0.0
 */

function incrementVersion(currentVersion, type = 'patch') {
  const parts = currentVersion.split('.').map(Number);

  if (parts.length !== 3) {
    throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤–µ—Ä—Å–∏–∏. –û–∂–∏–¥–∞–µ—Ç—Å—è: major.minor.patch');
  }

  const [major, minor, patch] = parts;

  switch (type) {
    case 'patch':
      return `${major}.${minor}.${patch + 1}`;
    case 'minor':
      return `${major}.${minor + 1}.0`;
    case 'major':
      return `${major + 1}.0.0`;
    default:
      return `${major}.${minor}.${patch + 1}`;
  }
}

function updateVersionInFooter(newVersion) {
  const footerPath = path.join(__dirname, '..', 'src', 'components', 'Footer.tsx');

  if (!fs.existsSync(footerPath)) {
    throw new Error('Footer.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω');
  }

  let content = fs.readFileSync(footerPath, 'utf8');
  const oldVersion = content.match(/const siteVersion = '([^']+)'/)?.[1];

  if (!oldVersion) {
    throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –≤ Footer.tsx');
  }

  console.log(`üìà –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏: ${oldVersion} ‚Üí ${newVersion}`);
  content = content.replace(
    `const siteVersion = '${oldVersion}'`,
    `const siteVersion = '${newVersion}'`
  );

  fs.writeFileSync(footerPath, content);
  console.log(`‚úÖ –í–µ—Ä—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –≤ Footer.tsx`);
}

function main() {
  const args = process.argv.slice(2);
  const incrementType = args[0] || 'patch';

  const validTypes = ['patch', 'minor', 'major'];
  if (!validTypes.includes(incrementType)) {
    console.error(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: ${incrementType}`);
    console.error(`üìù –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: ${validTypes.join(', ')}`);
    process.exit(1);
  }

  try {
    // –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â—É—é –≤–µ—Ä—Å–∏—é –∏–∑ Footer.tsx
    const footerPath = path.join(__dirname, '..', 'src', 'components', 'Footer.tsx');
    const content = fs.readFileSync(footerPath, 'utf8');
    const currentVersion = content.match(/const siteVersion = '([^']+)'/)?.[1];

    if (!currentVersion) {
      throw new Error('–ù–µ –Ω–∞–π–¥–µ–Ω–∞ —Ç–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –≤ Footer.tsx');
    }

    console.log(`üîç –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: ${currentVersion}`);
    console.log(`‚¨ÜÔ∏è –¢–∏–ø –∏–Ω–∫—Ä–µ–º–µ–Ω—Ç–∞: ${incrementType}`);

    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é
    const newVersion = incrementVersion(currentVersion, incrementType);
    console.log(`üéØ –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: ${newVersion}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º Footer.tsx
    updateVersionInFooter(newVersion);

    // –û–±–Ω–æ–≤–ª—è–µ–º Service Worker (–µ—Å–ª–∏ –µ—Å—Ç—å)
    const swPath = path.join(__dirname, '..', 'public', 'sw.js');
    if (fs.existsSync(swPath)) {
      let swContent = fs.readFileSync(swPath, 'utf8');
      swContent = swContent.replace(
        /const CACHE_NAME = '[^']+'/,
        `const CACHE_NAME = '4ai-ru-v${newVersion}'`
      );
      swContent = swContent.replace(
        /const STATIC_CACHE = '[^']+'/,
        `const STATIC_CACHE = 'static-v${newVersion}'`
      );
      swContent = swContent.replace(
        /const DYNAMIC_CACHE = '[^']+'/,
        `const DYNAMIC_CACHE = 'dynamic-v${newVersion}'`
      );
      fs.writeFileSync(swPath, swContent);
      console.log(`‚úÖ Service Worker –æ–±–Ω–æ–≤–ª–µ–Ω`);
    }

    console.log(`üéâ –í–µ—Ä—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞ –¥–æ ${newVersion}!`);
    console.log(`üì¶ –ì–æ—Ç–æ–≤–æ –∫ –∫–æ–º–º–∏—Ç—É –∏ –¥–µ–ø–ª–æ—é`);

  } catch (error) {
    console.error(`‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { incrementVersion, updateVersionInFooter };
