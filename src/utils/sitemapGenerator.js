/**
 * Sitemap Generator for Dynamic Pages
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç sitemap.xml –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏
 */

// –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–∞–π—Ç–∞
export const staticPages = [
  {
    url: 'https://4ai.ru',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'weekly',
    priority: '1.0'
  },
  {
    url: 'https://4ai.ru/about',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'monthly',
    priority: '0.8'
  },
  {
    url: 'https://4ai.ru/practices',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'weekly',
    priority: '0.9'
  },
  {
    url: 'https://4ai.ru/practices/regular-tantra',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'weekly',
    priority: '0.8'
  },
  {
    url: 'https://4ai.ru/practices/individual-sessions',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'weekly',
    priority: '0.8'
  },
  {
    url: 'https://4ai.ru/practices/couple-therapy',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'weekly',
    priority: '0.8'
  },
  {
    url: 'https://4ai.ru/practices/workshops',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'weekly',
    priority: '0.8'
  },
  {
    url: 'https://4ai.ru/blog',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'daily',
    priority: '0.7'
  },
  {
    url: 'https://4ai.ru/contact',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'monthly',
    priority: '0.6'
  },
  {
    url: 'https://4ai.ru/test',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'monthly',
    priority: '0.6'
  },
  {
    url: 'https://4ai.ru/privacy',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'yearly',
    priority: '0.3'
  },
  {
    url: 'https://4ai.ru/terms',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'yearly',
    priority: '0.3'
  },
  {
    url: 'https://4ai.ru/offer',
    lastmod: new Date().toISOString().split('T')[0],
    changefreq: 'yearly',
    priority: '0.3'
  }
];

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç XML sitemap
 * @param {Array} pages - –º–∞—Å—Å–∏–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
 * @returns {string} XML sitemap
 */
export const generateSitemapXML = (pages = staticPages) => {
  const xmlHeader = '<?xml version="1.0" encoding="UTF-8"?>';
  const urlsetOpen = '<urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">';
  const urlsetClose = '</urlset>';
  
  const urls = pages.map(page => {
    return `  <url>
    <loc>${page.url}</loc>
    <lastmod>${page.lastmod}</lastmod>
    <changefreq>${page.changefreq}</changefreq>
    <priority>${page.priority}</priority>
  </url>`;
  }).join('\n');
  
  return `${xmlHeader}
${urlsetOpen}
${urls}
${urlsetClose}`;
};

/**
 * –°–æ–∑–¥–∞–µ—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç sitemap.xml –≤ public –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
 * –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–æ–µ–∫—Ç–∞
 */
export const createSitemapFile = () => {
  if (typeof window === 'undefined') {
    // –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ/–ø—Ä–∏ —Å–±–æ—Ä–∫–µ
    const fs = require('fs');
    const path = require('path');
    
    const sitemapXML = generateSitemapXML();
    const sitemapPath = path.join(process.cwd(), 'public', 'sitemap.xml');
    
    try {
      fs.writeFileSync(sitemapPath, sitemapXML, 'utf8');
      console.log('‚úÖ Sitemap.xml generated successfully');
    } catch (error) {
      console.error('‚ùå Error generating sitemap.xml:', error);
    }
  }
};

/**
 * –û–±–Ω–æ–≤–ª—è–µ—Ç sitemap –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Å—Ç—Ä–∞–Ω–∏—Ü (–Ω–∞–ø—Ä–∏–º–µ—Ä, –±–ª–æ–≥ –ø–æ—Å—Ç—ã)
 * @param {Array} dynamicPages - –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 */
export const updateSitemapWithDynamicPages = (dynamicPages = []) => {
  const allPages = [...staticPages, ...dynamicPages];
  return generateSitemapXML(allPages);
};

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å sitemap
 */
export const validateSitemap = () => {
  const sitemap = generateSitemapXML();
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ URL –≤–∞–ª–∏–¥–Ω—ã
  const urlRegex = /https?:\/\/[^\s<>"{}|\\^`[\]]+/g;
  const urls = sitemap.match(urlRegex) || [];
  
  const invalidUrls = urls.filter(url => {
    try {
      new URL(url);
      return false;
    } catch {
      return true;
    }
  });
  
  if (invalidUrls.length > 0) {
    console.warn('‚ö†Ô∏è Invalid URLs in sitemap:', invalidUrls);
    return false;
  }
  
  console.log(`‚úÖ Sitemap validation passed: ${urls.length} URLs`);
  return true;
};

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç sitemap –≤ –ø–æ–∏—Å–∫–æ–≤—ã–µ —Å–∏—Å—Ç–µ–º—ã
 */
export const submitSitemapToSearchEngines = () => {
  const sitemapUrl = 'https://4ai.ru/sitemap.xml';
  
  // Google Search Console
  console.log(`üì§ Submit to Google: https://www.google.com/ping?sitemap=${encodeURIComponent(sitemapUrl)}`);
  
  // Yandex Webmaster
  console.log(`üì§ Submit to Yandex: https://webmaster.yandex.ru/ping?sitemap=${encodeURIComponent(sitemapUrl)}`);
  
  // Bing Webmaster
  console.log(`üì§ Submit to Bing: https://www.bing.com/ping?sitemap=${encodeURIComponent(sitemapUrl)}`);
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º sitemap –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –≤ build –ø—Ä–æ—Ü–µ—Å—Å–µ
if (typeof window === 'undefined' && process.env.NODE_ENV === 'production') {
  createSitemapFile();
  validateSitemap();
}
